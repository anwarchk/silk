// This file was generated by counterfeiter
package fakes

import (
	"net"
	"sync"
)

type NetAdapter struct {
	InterfacesStub        func() ([]net.Interface, error)
	interfacesMutex       sync.RWMutex
	interfacesArgsForCall []struct{}
	interfacesReturns     struct {
		result1 []net.Interface
		result2 error
	}
	InterfaceAddrsStub        func(net.Interface) ([]net.Addr, error)
	interfaceAddrsMutex       sync.RWMutex
	interfaceAddrsArgsForCall []struct {
		arg1 net.Interface
	}
	interfaceAddrsReturns struct {
		result1 []net.Addr
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *NetAdapter) Interfaces() ([]net.Interface, error) {
	fake.interfacesMutex.Lock()
	fake.interfacesArgsForCall = append(fake.interfacesArgsForCall, struct{}{})
	fake.recordInvocation("Interfaces", []interface{}{})
	fake.interfacesMutex.Unlock()
	if fake.InterfacesStub != nil {
		return fake.InterfacesStub()
	}
	return fake.interfacesReturns.result1, fake.interfacesReturns.result2
}

func (fake *NetAdapter) InterfacesCallCount() int {
	fake.interfacesMutex.RLock()
	defer fake.interfacesMutex.RUnlock()
	return len(fake.interfacesArgsForCall)
}

func (fake *NetAdapter) InterfacesReturns(result1 []net.Interface, result2 error) {
	fake.InterfacesStub = nil
	fake.interfacesReturns = struct {
		result1 []net.Interface
		result2 error
	}{result1, result2}
}

func (fake *NetAdapter) InterfaceAddrs(arg1 net.Interface) ([]net.Addr, error) {
	fake.interfaceAddrsMutex.Lock()
	fake.interfaceAddrsArgsForCall = append(fake.interfaceAddrsArgsForCall, struct {
		arg1 net.Interface
	}{arg1})
	fake.recordInvocation("InterfaceAddrs", []interface{}{arg1})
	fake.interfaceAddrsMutex.Unlock()
	if fake.InterfaceAddrsStub != nil {
		return fake.InterfaceAddrsStub(arg1)
	}
	return fake.interfaceAddrsReturns.result1, fake.interfaceAddrsReturns.result2
}

func (fake *NetAdapter) InterfaceAddrsCallCount() int {
	fake.interfaceAddrsMutex.RLock()
	defer fake.interfaceAddrsMutex.RUnlock()
	return len(fake.interfaceAddrsArgsForCall)
}

func (fake *NetAdapter) InterfaceAddrsArgsForCall(i int) net.Interface {
	fake.interfaceAddrsMutex.RLock()
	defer fake.interfaceAddrsMutex.RUnlock()
	return fake.interfaceAddrsArgsForCall[i].arg1
}

func (fake *NetAdapter) InterfaceAddrsReturns(result1 []net.Addr, result2 error) {
	fake.InterfaceAddrsStub = nil
	fake.interfaceAddrsReturns = struct {
		result1 []net.Addr
		result2 error
	}{result1, result2}
}

func (fake *NetAdapter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.interfacesMutex.RLock()
	defer fake.interfacesMutex.RUnlock()
	fake.interfaceAddrsMutex.RLock()
	defer fake.interfaceAddrsMutex.RUnlock()
	return fake.invocations
}

func (fake *NetAdapter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
